// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output   = "../lib/generated/prisma"
  binaryTargets = ["native", "rhel-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User model represents participants (primarily team leaders)
model User {
  id                String    @id @default(cuid())
  name              String
  email             String    @unique
  phone             String
  organizationName  String
  organizationType  String    // "student", "entrepreneur", "msme"
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  
  // Relations
  leadingTeam       Team?     @relation("TeamLeader")
  memberOf          TeamMember?
}

// Team model represents a participating team
model Team {
  id                String    @id @default(cuid())
  name              String
  size              Int       // 1-4
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  
  // Relations
  leaderId          String    @unique
  leader            User      @relation("TeamLeader", fields: [leaderId], references: [id], onDelete: Cascade)
  members           TeamMember[]
  themeId           String?
  theme             Theme?    @relation(fields: [themeId], references: [id])
  submission        Submission?
}

// TeamMember model represents team members (excluding the leader)
model TeamMember {
  id                String    @id @default(cuid())
  name              String
  email             String
  phone             String
  role              String?
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  
  // Relations
  teamId            String
  team              Team      @relation(fields: [teamId], references: [id], onDelete: Cascade)
  userId            String?   @unique
  user              User?     @relation(fields: [userId], references: [id])
  
  @@unique([teamId, email])
}

// Theme model represents the ideathon themes
model Theme {
  id                String    @id @default(cuid())
  slug              String    @unique
  title             String
  icon              String
  subtitle          String
  description       String    @db.Text
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  
  // Relations
  teams             Team[]
  submissions       Submission[]
}

// Submission model represents the idea submission
model Submission {
  id                String    @id @default(cuid())
  title             String
  description       String    @db.Text
  problemStatement  String    @db.Text
  proposedSolution  String    @db.Text
  expectedImpact    String    @db.Text
  previousExperience String?   @db.Text
  whyThisTheme      String?   @db.Text
  status            SubmissionStatus @default(PENDING)
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  
  // Relations
  teamId            String    @unique
  team              Team      @relation(fields: [teamId], references: [id], onDelete: Cascade)
  themeId           String
  theme             Theme     @relation(fields: [themeId], references: [id])
  
  // Evaluation relations
  evaluations       Evaluation[]
  shortlisted       Boolean   @default(false)
  finalist          Boolean   @default(false)
  winner            Boolean   @default(false)
}

// Evaluation model for judging submissions
model Evaluation {
  id                String    @id @default(cuid())
  innovationScore   Int       // 0-20
  sustainabilityScore Int     // 0-20
  presentationScore Int       // 0-10
  feasibilityScore  Int       // 0-15
  relevanceScore    Int       // 0-15
  communityImpactScore Int    // 0-15
  bonusScore        Int       // 0-5
  comments          String?   @db.Text
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  
  // Relations
  submissionId      String
  submission        Submission @relation(fields: [submissionId], references: [id], onDelete: Cascade)
  judgeId           String
  judge             Judge     @relation(fields: [judgeId], references: [id])
  
  @@unique([submissionId, judgeId])
}

// Judge model for evaluators
model Judge {
  id                String    @id @default(cuid())
  name              String
  email             String    @unique
  expertise         String?
  organization      String?
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  
  // Relations
  evaluations       Evaluation[]
}

// Admin model for system administrators
model Admin {
  id                String    @id @default(cuid())
  name              String
  email             String    @unique
  password          String
  role              AdminRole @default(ADMIN)
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
}

// Enums
enum SubmissionStatus {
  DRAFT
  PENDING
  UNDER_REVIEW
  SHORTLISTED
  REJECTED
  FINALIST
  WINNER
}

enum AdminRole {
  ADMIN
  SUPER_ADMIN
}